generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String
  fullName     String
  gender       String
  provinceId   String?
  districtId   String?
  userType     String
  isVerified   Boolean       @default(false)
  isPro        Boolean       @default(false)
  image        String?
  itineraries  Itinerary[]
  reviews      Review[]      @relation("UserReviews")
  reservations Reservation[]
  Province     Province?     @relation("UserProvince", fields: [provinceId], references: [provinceId])
  District     District?     @relation("UserDistrict", fields: [districtId], references: [districtId])
}

model Province {
  provinceId  String      @id @default(uuid())
  title       String
  description String
  pricePerDay Float
  images      String[]
  coordinates Json
  districts   District[]
  places      Place[]
  reviews     Review[]    @relation("ProvinceReviews")
  users       User[]      @relation("UserProvince")
  itineraries Itinerary[] @relation("ItineraryProvince")
}

model District {
  districtId  String      @id @default(uuid())
  title       String
  description String
  provinceId  String
  pricePerDay Float
  images      String[]
  coordinates Json
  bestPlaces  Place[]
  Province    Province    @relation(fields: [provinceId], references: [provinceId])
  reviews     Review[]    @relation("DistrictReviews")
  users       User[]      @relation("UserDistrict")
  itineraries Itinerary[] @relation("ItineraryDistrict")
}

model Place {
  placeId        String        @id @default(uuid())
  title          String
  description    String
  provinceId     String
  districtId     String
  category       String
  pricePerPerson Float
  images         String[]
  coordinates    Json
  Province       Province      @relation(fields: [provinceId], references: [provinceId])
  District       District      @relation(fields: [districtId], references: [districtId])
  reservations   Reservation[]
  reviews        Review[]      @relation("PlaceReviews")
}

model Review {
  reviewId    String    @id @default(uuid())
  authorId    String
  type        String
  typeId      String
  stars       Int
  date        DateTime
  title       String
  description String
  images      String[]
  User        User      @relation("UserReviews", fields: [authorId], references: [userId])
  Province    Province? @relation("ProvinceReviews", fields: [typeId], references: [provinceId], map: "Review_Province_fkey")
  District    District? @relation("DistrictReviews", fields: [typeId], references: [districtId], map: "Review_District_fkey")
  Place       Place?    @relation("PlaceReviews", fields: [typeId], references: [placeId], map: "Review_Place_fkey")
}

model Itinerary {
  itineraryId String   @id @default(uuid())
  userId      String
  provinceId  String
  districtId  String
  totalPrice  Float
  places      Json
  User        User     @relation(fields: [userId], references: [userId])
  Province    Province @relation("ItineraryProvince", fields: [provinceId], references: [provinceId])
  District    District @relation("ItineraryDistrict", fields: [districtId], references: [districtId])
}

model Reservation {
  reservationId      String             @id @default(uuid())
  placeId            String
  clientId           String
  timeInterval       Json
  totalPrice         Float
  isValidated        Boolean            @default(false)
  paymentId          String
  Place              Place              @relation(fields: [placeId], references: [placeId])
  User               User               @relation(fields: [clientId], references: [userId])
  PaymentInformation PaymentInformation @relation(fields: [paymentId], references: [paymentId])
}

model PaymentInformation {
  paymentId      String        @id @default(uuid())
  cardNumber     String
  cardHolderName String
  expirationDate String
  cvv            String
  reservations   Reservation[]
}
